"""
Times the length of time taken to do a
specified number of calls to noop()
"""

# Get the number of recursions to do
recurse = int(callargs.pop(0))

# Get the number of calls
num_calls = int(callargs[0])

# Called on bad argument
def fatal_error(l=None):
  log("Fatal Error!",l,"\n")
  exitall()

# Constructs one layer of the stack
STACK = []
def make_stack_layer():
  if len(STACK) == 0:
    def _noop(arg1):
      if type(arg1) not in (int, long):
        fatal_error(1)
      return arg1
    def _checked(arg1):
      try:
        v = _noop(arg1)
        if type(v) not in (int, long): fatal_error(2)
        return v
      except:
        fatal_error(3)
    STACK.append(_checked)
  else:
    noop = STACK[-1]
    def _noop(arg1):
      if type(arg1) not in (int, long):
        fatal_error(2)
      try:
        retval = noop(arg1)
      except:
        fatal_error()
      if type(retval) not in (int, long):
        fatal_error(3)
      return retval
    STACK.append(_noop)

# Constructs the stack of noop functions
def make_stack():
  for x in xrange(recurse):
    make_stack_layer()
  return STACK[-1]

# Get the top-level noop function
noop = make_stack()
      
# Get the start time
start = getruntime()

for x in xrange(num_calls):
  retval = noop(x)

end = getruntime()

# Output the time
log("Hand Optimized Start:",start,"End:",end,"Time:",(end-start),"\n")

