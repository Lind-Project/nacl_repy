"""

Handlers for the chdir system call.

Called from dispatcher.repy

Safe version checks all parameters, then calls real handler.

Chdir hadler pulls out the arguments, does any manditory checking
then calls the repy posix library chdir system call.  Then packs
the result back up.

"""


def lind_fs_chdir(args):
    """ chdir calls are dispatched to this function.

    See dispatcher.repy for details.

    Given the flags, mode and file name in a list,
    pull them out and make the actual syscall in the
    file system library.

    Pack the single int returned, or error.
    """


    file_name = args[0]
    try:
        result_fd = chdir_syscall(file_name)
    except SyscallError, e:
        return ErrorResponseBuilder("fs_chdir", e[1], e[2])
    return SuccessResponseBuilder("fs_chdir", result_fd)


def lind_safe_fs_chdir(args):
    """ Safely wrap the chdir call.

    See dispatcher.repy for details.

    Check the path for consistancy,
    then call the real chdir dispatcher.

    """

    file_name = args[0]

    assert isinstance(file_name, str), "filename should be a string"

    assert len(file_name) < PATH_MAX, " File name too long!"

    result = lind_fs_chdir(args)

    assert isinstance(result, Response), "wrong return type %s" % \
           (str(type(result)))
    if not result.is_error:
        assert (result.return_code == 0), \
               "Man page says access must return 0 on success."

    return result
