"""

Handlers for the open system call.

Called from dispatcher.repy

Safe version checks all parameters, then calls real handler.

Open hadler pulls out the arguments, does any manditory checking
then calls the repy posix library open system call.  Then packs
the result back up.

"""


#constants pulled from standard lib
MASK = 3
O_RDONLY = 00
O_WRONLY = 01
O_RDWR = 02
O_CREAT = 0100
O_EXCL = 0200
O_NOCTTY = 0400
O_TRUNC = 01000
O_APPEND = 02000
O_NONBLOCK = 04000
# O_NDELAY = O_NONBLOCK
O_SYNC = 010000
# O_FSYNC = O_SYNC
O_ASYNC = 020000

#ifdef __USE_GNU
# define O_DIRECT	 040000	/* Direct disk access.	*/
# define O_DIRECTORY	0200000	/* Must be a directory.	 */
# define O_NOFOLLOW	0400000	/* Do not follow links.	 */
# define O_NOATIME     01000000 /* Do not set atime.  */
# define O_CLOEXEC     02000000 /* Set close_on_exec.  */
#endif

#largest file descriptor
#TODO find out what the system limit is
MAX_FD = 1024


def lind_fs_open(args):
    """ open calls are dispatched to this function.

    See dispatcher.repy for details.

    Given the flags, mode and file name in a list,
    pull them out and make the actual syscall in the
    file system library.

    Pack the single int returned, or error.
    """

    flags = args[0]
    mode = args[1]
    file_name = args[2]
    try:
        result_fd = open_syscall(file_name, flags, mode)
    except SyscallError, e:
        message = "Could not find file: " + file_name + "\n" + str(e) + "\n"
        log(message)
        return ErrorResponseBuilder("fs_open", "ENOENT", message)
    return SuccessResponseBuilder("fs_open", result_fd)


def lind_safe_fs_open(args):
    """ Safely wrap the open call.

    See dispatcher.repy for details.

    Check the mode flags and file for consistancy,
    then call the real open dispatcher.

    """
    flags = args[0]
    mode = args[1]
    file_name = args[2]

    assert isinstance(flags, int), "the flags should be an int"
    assert isinstance(mode, int), "the mode should be an int"
    assert isinstance(file_name, str), "filename should be a string"
    assert ((flags & MASK) == O_RDONLY or
            (flags & MASK) == O_WRONLY or
            (flags & MASK) == O_RDWR), \
            "the flags to not seem to be one of the expected. %o" % (flags)

    result = lind_fs_open(args)

    assert isinstance(result, Response), \
           "wrong return type %s" % (str(type(result)))
    if not result.is_error:
        assert (-1 <= result.return_code <= MAX_FD), "Must return a valid FD."

    return result
