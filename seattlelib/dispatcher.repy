NOOP_CALL_NUM=1

#include dispatcher.mix

MODE="safe"

def setup_dispatcher(comp_num):
  # map a systemcall number to a particular function
  if MODE == "safe":
    comp(comp_num)[SYSCALL] = {
    1:lind_debug_noop,
    2:lind_fs_access,
    3:lind_debug_trace,
    4:lind_fs_unlink,
    5:lind_fs_link,
    6:lind_fs_chdir,
    7:lind_fs_mkdir,
    8:lind_fs_rmdir,                      
    9:lind_fs_xstat,                      
    10:lind_safe_fs_open,
    11:lind_safe_fs_close,
    12:lind_safe_fs_read,
    13:lind_fs_write,
    14:lind_fs_lseek,
    15:lind_fs_ioctl,
    17:lind_safe_fs_fstat,
    19:lind_safe_fs_fstatfs,
    31:lind_sys_getpid,
    105:lind_comp_cia,
    106:lind_comp_call,
    107:lind_comp_accept,
    108:lind_comp_recv
    }
  else:
    comp(comp_num)[SYSCALL] = {
    1:lind_debug_noop,
    2:lind_fs_access,
    3:lind_debug_trace,
    4:lind_fs_unlink,
    5:lind_fs_link,
    6:lind_fs_chdir,
    7:lind_fs_mkdir,
    8:lind_fs_rmdir,                      
    9:lind_fs_xstat,                      
    10:lind_fs_open,
    11:lind_fs_close,
    12:lind_fs_read,
    13:lind_fs_write,
    14:lind_fs_lseek,
    15:lind_fs_ioctl,
    17:lind_fs_fstat,
    19:lind_fs_fstatfs,  
    31:lind_sys_getpid,
    105:lind_comp_cia,
    106:lind_comp_call,
    107:lind_comp_accept,
    108:lind_comp_recv
    }
  
  #setup error codes
  comp(comp_num)[ERRNO] = {'ENOENT':2, 'EBADF':9,  'ENOSYS':38 }


def dispatch_syscall(call, args):
  try:
    syscall_response = curr_comp()[SYSCALL][call](args)
    

  except KeyError,e:
    log("[ERROR][dispatch] Failed to look up " + str(call) + str(e) + "\n")
    syscall_response =  ErrorResponseBuilder("ENOSYS", "The system call is not in the system call table. Call="+str(call))
  
  assert isinstance(syscall_response, Response), "Returning something that is not a response. Check system calls: " + str(type(syscall_response)) + " form " + str(call)
  
  return syscall_response

