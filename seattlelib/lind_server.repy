"""
The Lind OS Server.  This module services system calls coming from glibc
<Author>
  Chris Matthews (cmatthew@cs.uvic.ca)
<Start Date>
  Dececmber 2010



"""


def PackStringList(strings):
  return "".join(arg + "\0" for arg in strings)


def PackArgsMessage(argv, envv):
  return (struct.pack("4sII", "ARGS", len(argv), len(envv))
          + PackStringList(argv)
          + PackStringList(envv))



def NaclRPCServer():
  #todo these should come in the context  
  recv_socket = mycontext['recv_socket'] 
  send_socket = mycontext['send_socket']
  print recv_socket
  print send_socket
  while True:
    try:
      message, fds = recv_socket.imc_recvmsg(1024)
    # TODO(mseaborn): When the Python bindings raise a specific
    # exception type, we should test for that for EOF instead.
    except Exception:
      print "Error reading from socket."
      break
 
    method_id = message[:4]
    message_body = message[4:]
 
    print "Trace ", method_id, message_body
    
    send_socket.imc_sendmsg(1)



def main():
    #print "Starting Lind OS Server."
    NaclRPCServer()



if callfunc == "initialize":
  main()
