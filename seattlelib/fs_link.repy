"""

Handlers for the link system call.

Called from dispatcher.repy

Safe version checks all parameters, then calls real handler.

Link hadler pulls out the arguments, does any manditory checking
then calls the repy posix library link system call.  Then packs
the result back up.

"""


def lind_fs_link(args):
    """ link calls are dispatched to this function.

    See dispatcher.repy for details.

    Given the paths in a list,
    pull them out and make the actual syscall in the
    file system library.

    Pack the int returned, or error.
    """

    old_file_name = args[0]
    new_file_name = args[1]

    try:
        result = link_syscall(old_file_name, new_file_name)
    except SyscallError, e:
        return ErrorResponseBuilder("fs_link", e[1], e[2])
    return SuccessResponseBuilder("fs_link", result)


def lind_safe_fs_link(args):
    """ Safely wrap the link call.

    See dispatcher.repy for details.

    Check the paths for consistancy,
    then call the real link dispatcher.

    """

    file_name = args[0]

    assert isinstance(file_name, str), "filename should be a string"

    file_name = args[1]

    assert isinstance(file_name, str), "filename should be a string"

    result = lind_fs_link(args)

    assert isinstance(result, Response), "wrong return type %s" % \
           (str(type(result)))
    if not result.is_error:
        assert (result.return_code == 0), "Must return 0 on success."
    else:
        pass
    return result
