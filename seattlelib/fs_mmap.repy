"""
Handlers for the mmap system call.

Called from dispatcher.repy

Safe version checks all parameters, then calls real handler

mmap handler pulls out the arguments, does any mandatory checking
then calls the patched-in posix mmap system call. Then packs
the result back up.

"""

def lind_fs_mmap(args):
    """ mmap calls are dispatched to this function.

    See dispatcher.repy for details.

    Given the handle in a list,
    pull it out and make the actual syscall in the
    file system library.

    Pack the single int returned, or error.
    """
    addr = args[0]
    leng = args[1]
    prot = args[2]
    flags = args[3]
    fildes = args[4]
    off = args[5]
    try:
        result = get_fs_call(args[-1],"mmap_syscall")(addr, leng, prot, flags, fildes, off)
    except SyscallError, e:
        return ErrorResponseBuilder("fs_mmap", e[1], e[2])
    return SuccessResponseBuilder("fs_mmap", result)

def lind_safe_fs_mmap(args):
    """ Safely wrap the mmap call.

    See dispatcher.repy for details.

    Check the args for consistency, then call the real mmap dispatcher.

    """
#No huge pages support yet
    addr = args[0]
    leng = args[1]
    prot = args[2]
    flags = args[3]
    fildes = args[4]
    off = args[5]
    assert prot == prot & (PROT_READ | PROT_WRITE | PROT_EXEC), "prot value must have only valid flags"
    assert flags == flags & (MAP_SHARED | MAP_PRIVATE | MAP_FIXED | MAP_ANONYMOUS), "flags value must have only valid flags"
    assert bool(flags & MAP_PRIVATE) != bool(flags & MAP_SHARED), "mapping can not be both private and shared"
    assert isinstance(addr, int), "the addr should be an int"
    assert isinstance(leng, int), "the len should be an int"
    assert isinstance(prot, int), "the prot should be an int"
    assert isinstance(flags, int), "the flags should be an int"
    assert isinstance(filedes, int), "the filedes should be an int"
    assert isinstance(off, int), "the off should be an int"
    return lind_fs_mmap(args)
