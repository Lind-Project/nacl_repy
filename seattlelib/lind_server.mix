"""

The Lind OS Server.  This module services system calls coming from glibc
<Author>
  Chris Matthews (cmatthew@cs.uvic.ca)
<Start Date>
  Dececmber 2010

<Revised by>
  Yiwen Li (liyiwen@nyu.edu)
<Revise Date>
  October 2014

"""

include struct.repy

VERSION = "$Rev$"


SILENT = True # Try to produce output as close as the OS would
               # this means no debug/error messages!

TRACE = False  # Trace system calls? (somewhat like strace) 



SYSCALL = "syscall"               # shortcut to syscall dict items
FILES = "FILES"                   # these also make a typo more specific
COMP = "comp"                                # than a dict lookup error
ERRNO = "errno.h"
MBOX = "mbox"
LOCK = "lock"
PROGRAM = "program"
CMD_LINE = "command_line_args"
SUCCESS = 0

PRODUCTION = False
COMP_MODE = "component_mode"

# the size of the transmission buffer.  We should never send something
# bigger than this!
TX_BUF_MAX = (4096 * 4) - 16   # 16 bytes of header
RX_BUF_MAX = (4096 * 4)



def is_trace():
  if not TRACE:
    def log(arg):
      """Turn off logging"""
      pass


def warning(*msg):
  if not SILENT:
    for part in msg:
      print part,
    print


def assert_warning(logic, message):
  """Like assert, but only warn"""
  if not logic:
    log( "Warning:"+ message)


def curr_comp():
  return mycontext[mycontext[COMP]]


def comp(num):
  return mycontext[num]


def unimplemented(who):
  """what to do when we come across some code that needs to be finished.
  For now, lets just keep running, but really this should not happen
  so we should exit.  """
  message = "a unimplemented function has been called " + str(who)
  if PRODUCTION:
    log("error: " + message)
    exitall()
  else:
    log("warning: " + message)

include lind_rpc.repy


include lind_parsers.repy

include lind_fs_constants.py

def check_valid_fd_handle(num):
  assert isinstance(num, int)
  assert (STARTINGFD <= num <= MAX_FD), "invalid handle %d" % num


include errno.repy

include lind_net_constants.py

include serialize.repy

include lind_fs_calls.py

include lind_net_calls.py

include fs_open.repy

include fs_write.repy

include fs_fstatfs.repy

include fs_statfs.repy

include comp.repy

include fs_access.repy

include fs_read.repy

include fs_fstat.repy

include fs_close.repy

include fs_lseek.repy

include fs_mkdir.repy

include fs_rmdir.repy

include fs_chdir.repy

include fs_link.repy

include fs_unlink.repy

include fs_xstat.repy

include fs_getdents.repy

include fs_dup.repy

include fs_dup2.repy

include fs_fcntl.repy

include sys_getpid.repy

include net_socket.repy

include net_bind.repy

include net_send.repy

include net_sendto.repy

include net_recv.repy

include net_recvfrom.repy

include net_connect.repy

include net_listen.repy

include net_accept.repy

include net_getpeername.repy

include net_getsockname.repy

include net_getsockopt.repy

include net_setsockopt.repy

include net_shutdown.repy

include net_select.repy

include net_getifaddrs.repy

include net_poll.repy

include net_epoll.repy

include net_socketpair.repy

include sys_getuid.repy

include sys_geteuid.repy

include sys_getgid.repy

include sys_getegid.repy

include fs_flock.repy

include fs_rename.repy

include debug.repy

include unimplemented_syscalls.repy

include dispatcher.repy


def print_times(times):
  print "\nSummary of System Call Execution Times:"
  prefix = ">> "  # prefix which the scripts can use to pull out these numbers
  for eachtime in times:
    each = 0
    call = eachtime[each]
    each += 1
    # using the call number, pull the string name out of the function object
    function_name = str(curr_comp()[SYSCALL][call]).split(" ")[1]
    exec_pre = eachtime[each]
    each += 1
    exec_start = eachtime[each]
    each += 1
    exec_post = eachtime[each]
    each += 1
    exec_stop = eachtime[each]
    each += 1
    exec_before = eachtime[each]
    each += 1
    exec_after = eachtime[each]
    each += 1
    call_args = eachtime[each]
    print prefix, function_name + ", " + "%f" % (exec_pre) + ", " + \
          "%f" % (exec_start) + ", " + "%f" % (exec_post) + ", " + \
          "%f" % (exec_stop) + ", " + "%f" % (exec_before) + ", " + \
          "%f" % (exec_after) + ", \"" + str(call_args) + "\""
          

def LindSyscall(call_num, args):

  # log("We have entered LindSyscall\n")

  comp_num = 1
  response = None
  if TRACE:
    strace_msg = [ "[lind_server][trace]", str(str(curr_comp()[SYSCALL][call_num]).split(" ")[1]), str(args)[:128], " = "]
  mycontext[LOCK].acquire(True)
  mycontext[COMP] = comp_num
  try:
    response = dispatch_syscall(call_num, args)
  except Exception, e:
    response = ErrorResponseBuilder("LindSyscall", "ENOSYS", str(e))
  except:
    response = ErrorResponseBuilder("LindSyscall", "ENOSYS", "Internal Syscall Error")
  finally:
    if TRACE and call_num not in [3]:
      strace_msg.append(str(response)[:128])
      log( ''.join(strace_msg)+'\n')
  mycontext[LOCK].release()
  if response == None:
    raise Exception()
  return response


def GetHostFdFromLindFd(lind_fd):
  # log("We have entered GetHostFdFromLindFd\n")

  assert isinstance(lind_fd, int)
  if lind_fd < 0:
    return -1
  if not lind_fd in filedescriptortable.keys():
    log("GetHostFdFromLindFd: fd "+str(lind_fd)+" not found\n")
    return -1
  inode = filedescriptortable[lind_fd]["inode"]
  if not inode in fileobjecttable.keys():
    log("GetHostFdFromLindFd: inode "+str(inode)+" not found\n")
  fobj = fileobjecttable[inode].fobj
  return fobj.fileno()



def launch_helper(instance, num):
  """save the instance and start the server in a thread."""

  def closure():
    NaclRPCServer(instance, num)
  createthread(closure)


def _check_file(name):
  if name.startswith("/"):
    raise FileNotFoundError("Cannot open files from full path")

  if name.startswith("./"):
    cleanname = name[2:]
  else:
    cleanname = name
  try:
    f = openfile(cleanname, False)
    f.readat(0,100)
    f.close()
  except FileNotFoundError:
    print "File not found:", name
    exitall()
    


def new_compoent():
  """add a new compoent to the system"""
  
  mycontext[2] = {}
  code_loc = "liblind/com2.nexe"
  mycontext[2][PROGRAM] = code_loc
  
  mycontext[2][CMD_LINE] = []
  setup_dispatcher(2)
  setup_filetable(2)
  setup_component_communication(2)
  nacl = safelyexecutenativecode(code_loc, [])


  if nacl != None:
    launch_helper(nacl, 2)
  else:
    print "Safe Binary mode must be switched on for this program to work."


def setup_filetable(comp_num):
  """Try to open file system. If you can't, then make a new one."""
  log( "Opening file system...\n")
  load_fs()
  # load_fs() will check first if the metadata is present, if not
  # present it will create it. I am removing the following call
  # because it duplicates the creation of special files.
  # load_fs_special_files()
  log( "done.\n")

  # except KeyError, e:


def setup_component_communication(comp_num):
    comp(comp_num)[MBOX] = []


def lind_factory():
  setup_errnos(1)
  setup_dispatcher(1)
  setup_filetable(1)
  setup_component_communication(1)
  mycontext[LOCK] = createlock()
  #_check_file(curr_comp()[PROGRAM])
  #if we are running a compoent, launch another one as a test.
  if "com1" in curr_comp()[PROGRAM]:
    log("starting multi-component test mode")
    mycontext[COMP_MODE] = True
    new_compoent()
  else:
    mycontext[COMP_MODE] = False


def parse_commandline():
  mycontext[COMP] = 1
  mycontext[1] = {}
  
  if callargs[0] == "--fast":
    curr_comp()[PROGRAM] = callargs[1]
    curr_comp()[CMD_LINE] = callargs[2:]
    curr_comp()[CMD_LINE].append("--fast")
  else:
    curr_comp()[PROGRAM] = callargs[0]
    curr_comp()[CMD_LINE] = callargs[1:]


def finalize():
  log("Persisting metadata: ...\n")
  persist_metadata(DEFAULT_METADATA_FILENAME)
  log("Done persisting metadata.\n")


def main():
  is_trace()

  if callfunc == "initialize":
    log( "Lind v0." + VERSION[6:-2] + "Last commit:" + "$Date$"[7:-2]+"\n")
    parse_commandline()
    lind_factory()


main()


