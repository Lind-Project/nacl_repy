"""

The Lind OS Server.  This module services system calls coming from glibc
<Author>
  Chris Matthews (cmatthew@cs.uvic.ca)
<Start Date>
  Dececmber 2010

<Revised by>
  Yiwen Li (liyiwen@nyu.edu)
<Revise Date>
  October 2014

"""

import sys              # for sys.stderr

include struct.repy

VERSION = "1.0-rc2"

syscall_table = [None] * 256 #initial length of 256

def warning(*msg):
  for part in msg:
    print part,
  print


def assert_warning(logic, message):
  """Like assert, but only warn"""
  if not logic:
    print >> sys.stderr,  "Warning:"+ message


def unimplemented(who):
  """what to do when we come across some code that needs to be finished.
  For now, lets just keep running, but really this should not happen
  so we should exit.  """
  message = "a unimplemented function has been called " + str(who)
  print >> sys.stderr,  "warning: " + message

include lind_rpc.repy

include lind_parsers.repy

include lind_fs_constants.py

def check_valid_fd_handle(num):
  assert isinstance(num, int)
  assert (STARTINGFD <= num <= MAX_FD), "invalid handle %d" % num


include errno.repy

include lind_net_constants.py

include serialize.repy

include lind_net_calls.py

include lind_fs_calls.py

include fs_open.repy

include fs_write.repy

include fs_pwrite.repy

include fs_fstatfs.repy

include fs_statfs.repy

include fs_access.repy

include fs_read.repy

include fs_pread.repy

include fs_fstat.repy

include fs_close.repy

include fs_lseek.repy

include fs_mkdir.repy

include fs_rmdir.repy

include fs_chdir.repy

include fs_link.repy

include fs_unlink.repy

include fs_xstat.repy

include fs_getdents.repy

include fs_dup.repy

include fs_dup2.repy

include fs_fcntl.repy

include fs_ioctl.repy

include sys_getpid.repy

include net_socket.repy

include net_bind.repy

include net_send.repy

include net_sendto.repy

include net_recv.repy

include net_recvfrom.repy

include net_connect.repy

include net_listen.repy

include net_accept.repy

include net_getpeername.repy

include net_getsockname.repy

include net_getsockopt.repy

include net_setsockopt.repy

include net_shutdown.repy

include net_select.repy

include net_getifaddrs.repy

include net_poll.repy

include net_epoll.repy

include net_socketpair.repy

include net_gethostname.repy

include sys_getuid.repy

include sys_geteuid.repy

include sys_getgid.repy

include sys_getegid.repy

include sys_exit.repy

include fs_flock.repy

include fs_rename.repy

include fs_pipe.repy

include fs_fork.repy

include fs_mmap.repy

include fs_munmap.repy

include fs_exec.repy

include unimplemented_syscalls.repy

include dispatcher.repy


LindSyscall = dispatch_syscall

def _check_file(name):
  if name.startswith("/"):
    raise FileNotFoundError("Cannot open files from full path")

  if name.startswith("./"):
    cleanname = name[2:]
  else:
    cleanname = name
  try:
    f = openfile(cleanname, False)
    f.readat(0,100)
    f.close()
  except FileNotFoundError:
    print "File not found:", name
    exitall()

def setup_filetable(cageid):
  print >> sys.stderr, "Opening file system..."
  load_fs(cageid)

def finalize():
  print >> sys.stderr,  "Persisting metadata: ..."
  persist_metadata(DEFAULT_METADATA_FILENAME)
  print >> sys.stderr,  "Done persisting metadata."

def main(cageid):
  if callfunc == "initialize":
    print >> sys.stderr, "Lind v" + VERSION
    setup_filetable(cageid)

main(1)


