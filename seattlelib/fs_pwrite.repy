"""

Handlers for the pwrite system call.

Called from dispatcher.repy

Safe version checks all parameters, then calls real handler.

Pwrite handler pulls out the arguments, does any mandatory checking
then calls the repy posix library pwrite system call.  Then packs
the result back up.

"""

def lind_fs_pwrite(args):

    fd = args[0]
    size = args[1]
    offset = args[2]

    # slice buffer string to only send size n bytes
    buffer = args[3][:size]
    
    if IS_SOCK_DESC(fd,args[-1]):
        try:
            result = get_fs_call(args[-1],"send_syscall")(fd, buffer, 0)
        except SyscallError, e:
            print "Pwrite failed with", e
            return ErrorResponseBuilder("fs_pwrite", e[1], e[2])
    else:
        try:
            result = get_fs_call(args[-1],"pwrite_syscall")(fd, buffer, offset)
        except SyscallError, e:
            return ErrorResponseBuilder("fs_pwrite", e[1], e[2])
    return SuccessResponseBuilder("fs_pwrite", result)


def lind_safe_fs_pwrite(args):

    """ Safely wrap the pwrite call.

    See dispatcher.repy for details.

    Check the handle, size, offset, and buffer for consistency;
    then call the real pwrite dispatcher.

    """
    
    fd = args[0]
    size = args[1]
    offset = args[2]
    buffer = args[3]
    
    assert isinstance(size, int)
    assert isinstance(offset, int)
    #assert size == len(buffer), "pwrite size does not match buffer size"
    check_valid_fd_handle(fd)

    lind_fs_pwrite(args)
    return SuccessResponseBuilder("fs_pwrite", size)
