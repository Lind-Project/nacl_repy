"""

Chris Matthews  2011
cmatthew@cs.uvic.ca

Classes for Lind RPC.

Response is a super class used for sending data back, which can be either an
error or success.

"""


class Response:
    """ An Response to a RPC request.

    <Purpose>

    This object is responsible sending responses to specific system
    calls.  It is loaded with data, then can build a reply struct
    which can then be sent back to NaCl through an IMC channel.

    The Response can be in one of two states, an Error response (for
    calls that have failed somehow), or a success response. An error
    response has an error code and a message for perror to display. A
    success has a return code and optionally a data string.

    TODO: error message is not yet displayed by perror.
    """
    message = "No error message set"
    data = ""

    def __init__(self, response_type, is_error):
        if (mode == "safe"):
            assert isinstance(response_type, str), "response type is not a string"
            assert isinstance(is_error, bool), "is error is not a boolean"

        self.response_type = response_type
        self.is_error = is_error

    def __str__(self):
        """Human readable format for debugging"""
        if self.is_error:
            type_str = "Error"
        else:
            type_str = "Success"
        return type_str + " in " + self.response_type + " with code " + \
               str(self.return_code) + " with data of size " + \
               str(len(self.data)) + " with data " + repr(self.data) + \
               str(len(self.message)) + " with data " + repr(self.message)


def ErrorResponseBuilder(who, code, message):
    """ Build an error response object.

    <Arguments>
        who: Which portion of the system or system call is making this reply.
        code: Positive error code to return, or string from errno.h to resolve
        to a number.

        message: A detailed message about the error.
        """
    if not SILENT:
        print "Note:", str(who), "got return code", code, ":", message
    r = Response(who, True)
    r.return_code = code
    r.message = message
    return r


def SuccessResponseBuilder(who, False, data=None):
    """Build an success response object.

    <Arugments>
        who: Which portion of the system or system call is making this reply.
        code: the integer return code to return.
        data: the data this call returns (as a string), if any.
    """
    r = Response(who, False)
    r.return_code = code
    if data != None:
        r.data = data
    return r
