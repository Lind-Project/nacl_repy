"""

Handlers for the getdents system call.

Called from dispatcher.repy

Safe version checks all parameters, then calls real handler.

Getdents handler pulls out the arguments, does any mandatory checking
then calls the repy SafePOSIX library getdents system call.  Then packs
the result back up.

"""


def pack_dirent(dir_tuple, my_start):
    """
    Given the python tuple produced by the repy SafePOSIX library, build the
    corresponding C struct.  This is tricky because it has offsets from
    the previous entries.

    See man 2 getdents for the struct format is wrong. See below
    format obtained by testing

    dir_tuple is the tuple with the info (inode, name)

    my_start is the distance from the start of the buffer that this
    entry starts at.
    """
    d_ino = dir_tuple[0]
    d_name = dir_tuple[1]

    # if the system call has the type typle too use it
    if len(dir_tuple) > 2:
        d_type = dir_tuple[2]
    else:
        d_type = DT_UNKNOWN  # TODO: set this
    
    # the format of the dirent struct is:
    #    unsigned long long d_ino
    #    signed long long offset
    #    unsigned short reclen
    #    char[] d_name
	#    char pad
    #    char type

    # We want to double word align this because C does so for the dirent structure.  This is meant to make any code that assumes this is true work
    # better, even though we are justified in not doing so by the specification.

    # compute the size w/o the padding byte first
    formatwopadding = "<Q<q<H" + str(len(d_name)) + "s<B"

    nopaddirent_len = struct_calcsize(formatwopadding)
    # Calculate padding to double word align it...
    paddingsize = 8-(nopaddirent_len % 8)
     
    # Now actually build the format string...
    format = "<Q<q<H" + str(len(d_name)) + "s"+str(paddingsize)+"s<B"
    actual_dirent_len = struct_calcsize(format)
    d_off = my_start + actual_dirent_len
        
    # and then pack things in adding NULL's to fill the padding
    dirent = struct_pack(format, d_ino, d_off, actual_dirent_len, d_name, "\0"*paddingsize, d_type)
    
    return (d_off, dirent)


def lind_fs_getdents(args):
    """ getdents calls are dispatched to this function.

    See dispatcher.repy for details.

    Given the file handle and max_bytes, return
    up to the dirents that fit in that space.

    """

    # the directory handle
    handle = args[0]

    #max bytes
    count = args[1]
	    
    try:
        py_result = get_fs_call(args[-1],"getdents_syscall")(handle, count)

    except SyscallError, e:
        return ErrorResponseBuilder("fs_getdents", e[1], e[2])

    if not py_result:
        return SuccessResponseBuilder("fs_getdents", 0)  # last entry is sent

    offset_cur = 0
    final_structs = []
    for ent in py_result:
        (off_delta, str_ent) = pack_dirent(ent, offset_cur)
        offset_cur = off_delta
        final_structs.append(str_ent)
	
    result = ''.join(final_structs)

    return SuccessResponseBuilder("fs_getdents", len(result), result)


def lind_safe_fs_getdents(args):
    """ Safely wrap the getdents call.

    See dispatcher.repy for details.

    Check the handle and count for consistency,
    then call the real getdents dispatcher.

    """
    handle = args[0]
    count = args[1]

    check_valid_fd_handle(handle)
    assert isinstance(count, int)
	
	 
    result = lind_fs_getdents(args)
	
    if result.is_error == False:
        #assert(len(result.data) <= TX_BUF_MAX), \
        #    "returning data larger than transmission buffer."

        assert(len(result.data) <= count), \
               "not observing byte count parameter."
    return result