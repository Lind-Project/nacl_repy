def pack_dirent(dir_tuple, starting_dist):
  inode = dir_tuple[0]
  name = dir_tuple[1]
  # we are missing a short type
  # unsigned long inode
  # unsigned long offset
  # unsigned short reclen
  # char[] name
  # char pad
  # char d_type

  format = "<Q<Q2s"+str(len(name))+"s2s"
  print format
  dirent_len = struct_calcsize(format)
  next_off = starting_dist + dirent_len
  dirent = struct_pack(format, inode, next_off, '\x00\x00', name,'\x00\x00')

  return (dirent_len, dirent)

def lind_fs_getdents(args):
  handle = args[0]
  count = args[1]
  try:
    py_result = getdents_syscall(handle, count)
  except SyscallError, e:
    print "Error!"
    return ErrorResponseBuilder("fs_getdents", e[1], e[2])

  offset = 0
  final_structs = []
  for ent in py_result:
    (size, str_ent) = pack_dirent(ent, offset)
    offset += size
    final_structs.append(str_ent)

  result = ''.join(final_structs)
  
  return SuccessResponseBuilder("fs_getdents", len(result), result)

def lind_safe_fs_getdents(args):
  handle = args[0]
  count = args[1]
  check_valid_fd_handle(handle)
  assert isinstance(count, int)
  
  result = lind_fs_getdents(args)

  if result.is_error == False:
    assert(len(result.data) <= 1024), "returning data larger than transmission buffer."
  
  return result
