"""
This security layer interposes on file operations so we can get timing statistics

"""	


def dectime(func):
  def timeit(*args, **kwargs):
    timestart = time.time()
    result = func(*args, **kwargs)
    timeend = time.time()
    time_result = 1000 * (timeend - timestart)
    res_string = "Total time for " + str(func.__name__) + " was " + str(time_result) + " ms"
    log(res_string)
    return result
  return timeit


class SecureFile():
  def __init__(self,privilegedfo):
    self.privilegedfo = privilegedfo
  
  @dectime
  def readat(self,bytes,offset):
    return self.privilegedfo.readat(bytes,offset)
  
  @dectime
  def writeat(self,data,offset):
    return self.privilegedfo.writeat(data,offset)

  @dectime	
  def close(self):
    return self.privilegedfo.close()

@dectime
def secure_openfile(filename, create):
  # Open a file from the layer below (likely the sandbox)
  log("opening a file")
  privilegedfo = openfile(filename,create)
  return SecureFile(privilegedfo)


# You can ignore the code below here.   It just sets of the security layer so that the application calls it instead of
# the original API functions.
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

sec_file_def = {"obj-type":SecureFile,
    "name":"SecureFile",
    "readat":{TYPE:FUNC,ARGS:((int,long,type(None)),(int,long)),EXCP:Exception,RETURN:str,TARGET:SecureFile.readat},
    "writeat":{TYPE:FUNC,ARGS:(str,(int,long)),EXCP:Exception,RETURN:(None),TARGET:SecureFile.writeat},
    "close":{TYPE:FUNC,ARGS:None,EXCP:None,RETURN:(bool,type(None)),TARGET:SecureFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:secure_openfile}

secure_dispatch_module()
