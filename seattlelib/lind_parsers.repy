"""
Chris Matthews (2012) cmatthew@cs.uvic.ca

This file contains parsers and packers for C structs.

"""


def inet_ntoa(ipaddress):
    """
    Convert an IP address in integer form to a presentation string

    This is

    """
    a, b, c, d = struct_unpack("<B<B<B<B", ipaddress)
    return str(a) + "." + str(b) + "." + str(c) + "." + str(d)


def inet_aton(ipaddress):
    """
    Convert an IP address in presentation format to its integer octet format

    """
    return struct_unpack("<I", struct_pack("<B<B<B<B", \
                                           *map(int, ipaddress.split("."))))[0]


struct_sockaddr_format = '<h>H<I<Q'  # family, port, address, padding


def parse_sockaddr_struct(sock):
    """parse a struct sockaddr, and pull out family, port, ip and padding"""
    fmt = struct_sockaddr_format
    assert struct_calcsize(fmt) == 16
    return struct_unpack(fmt, sock)


def pack_struct_sockaddr(family, ip, port):
    packed_ip = inet_aton(ip)
    return struct_pack(struct_sockaddr_format, family, port, packed_ip, 0)


# struct pollfd {
#     int   fd;         /* file descriptor */
#     short events;     /* requested events */
#     short revents;    /* returned events */
#     };

single_struct_pollfd_fmt = "<I<h<h"


def parse_struct_pollfds(pollfds_str, nfds):
    struct_siz = struct_calcsize(single_struct_pollfd_fmt)
    mynfds = len(pollfds_str) / struct_siz
    assert mynfds == nfds, "Struct pollfd size missmatch."

    def split(input, size):
        return [input[start:start + size] \
                for start in range(0, len(input), size)]

    structs = split(pollfds_str, struct_siz)

    result = map(lambda x: struct_unpack(single_struct_pollfd_fmt, x), structs)
    result = map(lambda x: {'fd': x[0],
                            'events': x[1],
                            'revents': x[2]},
                 result)
    return result


def pack_struct_pollfds(pollfds_dict, nfds):
    format = single_struct_pollfd_fmt * nfds
    elements = map(lambda x: (x['fd'], x['events'], x['revents']), 
                   pollfds_dict)
    elements = [item for sublist in elements for item in sublist]
    return struct_pack(format, *elements)


def pack_stat_struct(struct_tuple):
    """Given a tuple with stat fields, pack it into a string"""
    (my_st_dev, my_st_ino, my_st_mode, my_st_nlink, my_st_uid, my_st_gid,
     my_st_rdev, my_st_size, my_st_blksize, my_st_blocks,
     my_st_atime, my_st_atimeus, my_st_mtime, \
     my_st_mtimeus, my_st_ctime, my_st_ctimeus) = struct_tuple

    if type(my_st_rdev) == tuple:
        ma = my_st_rdev[0]
        mi = my_st_rdev[1]
        my_st_rdev = (((ma) << 20) | (mi))
        
    result = struct_pack('<Q<Q<I<I<I<I<Q<q<q<q<Q<Q<Q<Q<Q<Q',
                         my_st_dev, my_st_ino, my_st_mode, my_st_nlink, \
                         my_st_uid, my_st_gid, my_st_rdev, my_st_size, \
                         my_st_blksize, my_st_blocks, my_st_atime, \
                            my_st_atimeus, my_st_mtime, my_st_mtimeus, \
                         my_st_ctime, my_st_ctimeus)
    return result


def pack_statfs_struct(fsd):
    """struct statfs {
                    long    f_type;     -- type of file system (see below)
                    long    f_bsize;    -- optimal transfer block size
                    long    f_blocks;   -- total data blocks in file system
                    long    f_bfree;    -- free blocks in fs
                    long    f_bavail;   -- free blocks avail to non-superuser
                    long    f_files;    -- total file nodes in file system
                    long    f_ffree;    -- free file nodes in fs
                    fsid_t  f_fsid;     -- file system id
                    long    f_namelen;  -- maximum length of filenames
    """
    (tipe, bsize, blocks, bfree, bavail, files, ffree,\
     fsid, namelen, frsize, spare) = (fsd['f_type'],
                                      fsd['f_bsize'],
                                      fsd['f_blocks'],
                                      fsd['f_bfree'],
                                      fsd['f_bavail'],
                                      fsd['f_files'],
                                      fsd['f_files'],
                                      fsd['f_fsid'],
                                      fsd['f_namelen'],
                                      fsd['f_frsize'],
                                      fsd['f_spare'])

    format = '<q<q<q<q<q<q<q<Q<q<q8s'
    result = struct_pack(format, tipe, bsize, blocks, bfree, bavail, \
                         files, ffree, fsid, namelen, frsize, spare)
    return result


SEC_PER_MICROSEC = 0.000001
MICROSEC_PER_SEC = 1000000

def parse_timeval(timeval_str):
    """given a struct timeval, make it into a float in seconds.

    @return a float in seceonds, then each sec and usec member
    """
    
    tv_sec, tv_usec = struct_unpack("<Q<Q",timeval_str)
    return ((tv_sec + (SEC_PER_MICROSEC * tv_usec)), tv_sec, tv_usec)


def pack_struct_timeval(tv_sec, tv_usec):
    """given a struct timeval, make it into a float in seconds.

    @return a float in seceonds, then each sec and usec member
    """
    new_struct= struct_pack("<Q<Q",tv_sec, tv_usec)
    return new_struct

    
